The following modules were not unloaded:
  (Use "module --force purge" to unload all):

  1) 2023.01   2) StdEnv
wandb: Currently logged in as: stefania_radu. Use `wandb login --relogin` to force relogin
wandb: wandb version 0.16.3 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.15.12
wandb: Run data is saved locally in /home2/s3919609/pixel-semantic/wandb/run-20240304_173002-3lojf41v
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run elated-waterfall-214
wandb: ‚≠êÔ∏è View project at https://wandb.ai/stefania_radu/pixel-semantic-scripts_visualization
wandb: üöÄ View run at https://wandb.ai/stefania_radu/pixel-semantic-scripts_visualization/runs/3lojf41v
03/04/2024 17:30:07 - INFO - pixel.data.rendering.rendering_utils - loading text renderer configuration file https://huggingface.co/Team-PIXEL/pixel-base/resolve/main/text_renderer_config.json from cache at /home2/s3919609/.cache/huggingface/transformers/892d6a02d7c441000de399de59ed70d943a81f7b0f536523b4af1111677a8508.e332b34c9c05756dd4aa51d8fa33461dbd79604752296d185f03f8004db30700
03/04/2024 17:30:07 - INFO - pixel.data.rendering.rendering_utils - loading font file https://huggingface.co/Team-PIXEL/pixel-base/resolve/main/GoNotoCurrent.ttf from cache at /home2/s3919609/.cache/huggingface/transformers/49e6dc219d1a1a1c9236acaf05a48b542002016a6dc877ee72baab085a84257b.3f28e7f4b38e1efe1b6da4a3732404c19d4c6a614ff32dce90a251e293d4ce58
03/04/2024 17:30:07 - INFO - pixel.data.rendering.pygame_renderer - Loading font from /home2/s3919609/.cache/huggingface/transformers/49e6dc219d1a1a1c9236acaf05a48b542002016a6dc877ee72baab085a84257b.3f28e7f4b38e1efe1b6da4a3732404c19d4c6a614ff32dce90a251e293d4ce58
03/04/2024 17:30:07 - INFO - pixel.data.rendering.rendering_utils - Text renderer PyGameTextRenderer {
  "background_color": "white",
  "dpi": 120,
  "font_color": "black",
  "font_file": "49e6dc219d1a1a1c9236acaf05a48b542002016a6dc877ee72baab085a84257b.3f28e7f4b38e1efe1b6da4a3732404c19d4c6a614ff32dce90a251e293d4ce58",
  "font_size": 8,
  "max_seq_length": 256,
  "pad_size": 3,
  "pixels_per_patch": 16,
  "text_renderer_type": "PyGameTextRenderer"
}

03/04/2024 17:30:09 - INFO - pixel.utils.modeling - Truncating position embeddings to 256
03/04/2024 17:30:09 - INFO - pixel.utils.modeling - Truncating decoder position embeddings to 256
03/04/2024 17:30:09 - INFO - __main__ - Running PIXEL masked autoencoding with pixel reconstruction
03/04/2024 17:30:09 - INFO - __main__ - Applying span masking with "max_span_length = 4" , "cumulative_span_weights = [0.0, 0.0, 0.0, 1.0]"  and "spacing = span"
03/04/2024 17:30:09 - INFO - __main__ - Masked count: 64, ratio = 0.2500
03/04/2024 17:30:09 - INFO - __main__ - Monte Carlo samples: 100
03/04/2024 17:30:09 - INFO - __main__ - Training mode: True
all_attention (samples, layers, batch_size, num_heads, sequence_length, sequence_length): torch.Size([100, 12, 12, 193, 193])
all_attention after mean: torch.Size([12, 12, 193, 193])
03/04/2024 17:31:39 - INFO - __main__ - std_predictions shape: torch.Size([3, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
all_layers_attentions: torch.Size([12, 12, 256, 256])
attention_grid: torch.Size([3, 3098, 3098])
attention_grid 0 : tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0253,  ..., 0.0179, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.7820,  ..., 0.9163, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]])
attention_grid 1 : tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0253,  ..., 0.0179, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.7820,  ..., 0.9163, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]])
Are the channels different? False
03/04/2024 17:31:44 - INFO - __main__ - Mean variance for whole image: 0.015
03/04/2024 17:31:44 - INFO - __main__ - Mean std for whole image: 0.1
03/04/2024 17:31:44 - INFO - __main__ - SD image: [[0. 0. 0. ... 0. 0. 0.]
 [0. 0. 0. ... 0. 0. 0.]
 [0. 0. 0. ... 0. 0. 0.]
 ...
 [0. 0. 0. ... 0. 0. 0.]
 [0. 0. 0. ... 0. 0. 0.]
 [0. 0. 0. ... 0. 0. 0.]]
03/04/2024 17:31:44 - INFO - __main__ - Mean std for whole image patch mean: 0.02
03/04/2024 17:31:44 - INFO - __main__ - mean_std shape: (3, 256, 256)
03/04/2024 17:31:44 - INFO - __main__ - std_predictions shape: torch.Size([3, 256, 256])
mean_predictions: tensor([[[ 0.5456,  0.5470,  0.5485,  ...,  0.5343,  0.5357,  0.5364],
         [ 0.5354,  0.5212,  0.5827,  ...,  0.4838,  0.3507,  0.4721],
         [ 0.4665,  0.1425, -0.2612,  ...,  0.3043, -0.3384,  0.2904],
         ...,
         [ 0.6954,  0.6157,  0.6513,  ...,  0.6047,  0.6432,  0.6448],
         [ 0.7601,  0.6996,  0.6601,  ...,  0.3116,  0.5197,  0.6545],
         [ 0.6945,  0.7929,  0.7280,  ...,  0.7894,  0.6925,  0.6152]],

        [[ 0.5456,  0.5470,  0.5485,  ...,  0.5343,  0.5357,  0.5364],
         [ 0.5354,  0.5212,  0.5826,  ...,  0.4838,  0.3507,  0.4721],
         [ 0.4665,  0.1425, -0.2612,  ...,  0.3043, -0.3384,  0.2904],
         ...,
         [ 0.6954,  0.6156,  0.6513,  ...,  0.6047,  0.6432,  0.6448],
         [ 0.7600,  0.6996,  0.6602,  ...,  0.3116,  0.5197,  0.6545],
         [ 0.6945,  0.7929,  0.7280,  ...,  0.7894,  0.6924,  0.6152]],

        [[ 0.5456,  0.5470,  0.5485,  ...,  0.5343,  0.5357,  0.5364],
         [ 0.5354,  0.5212,  0.5827,  ...,  0.4838,  0.3507,  0.4721],
         [ 0.4665,  0.1425, -0.2612,  ...,  0.3043, -0.3384,  0.2904],
         ...,
         [ 0.6954,  0.6156,  0.6513,  ...,  0.6047,  0.6432,  0.6448],
         [ 0.7600,  0.6996,  0.6602,  ...,  0.3116,  0.5197,  0.6545],
         [ 0.6945,  0.7929,  0.7280,  ...,  0.7894,  0.6924,  0.6152]]])
std_predictions_per_patch: tensor([ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         2.8397,  2.8396,  2.8406,  2.8447,  2.8407,  2.8425,  2.8419,  2.8397,
         2.8403,  2.8382,  2.8374,  2.8418,  2.8368,  2.8395,  2.8386,  2.8420,
         4.2342,  4.2291,  4.2261,  4.2247,  4.2225,  4.2283,  4.2279,  4.2289,
         4.2393,  4.2237,  4.2240,  4.2263,  4.2297,  4.2314,  4.2273,  4.2284,
        19.8345, 19.7859, 19.7763, 19.7749, 19.7888, 19.7800, 19.7543, 19.7547,
        19.7736, 19.7691, 19.7737, 19.7618, 19.7926, 19.8093, 19.7754, 19.7809,
        13.9623, 13.9557, 14.0028, 14.0076, 13.9598, 13.9984, 14.0243, 14.0269,
        13.9870, 13.9681, 13.9760, 13.9854, 14.0115, 13.9872, 13.9764, 13.9994,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000])
std_reconstruction_per_patch: tensor([ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         2.8397,  2.8396,  2.8406,  2.8447,  2.8407,  2.8425,  2.8419,  2.8397,
         2.8403,  2.8382,  2.8374,  2.8418,  2.8368,  2.8395,  2.8386,  2.8420,
         4.2342,  4.2291,  4.2261,  4.2247,  4.2225,  4.2283,  4.2279,  4.2289,
         4.2393,  4.2237,  4.2240,  4.2263,  4.2297,  4.2314,  4.2273,  4.2284,
        19.8345, 19.7859, 19.7763, 19.7749, 19.7888, 19.7800, 19.7543, 19.7547,
        19.7736, 19.7691, 19.7737, 19.7618, 19.7926, 19.8093, 19.7754, 19.7809,
        13.9623, 13.9557, 14.0028, 14.0076, 13.9598, 13.9984, 14.0243, 14.0269,
        13.9870, 13.9681, 13.9760, 13.9854, 14.0115, 13.9872, 13.9764, 13.9994,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000])
03/04/2024 17:31:45 - INFO - __main__ - torch.Size([3, 256, 256])
03/04/2024 17:31:45 - INFO - __main__ - torch.Size([3, 256, 256])
wandb: Waiting for W&B process to finish... (success).
wandb: - 1.426 MB of 1.427 MB uploaded (0.000 MB deduped)wandb: \ 1.426 MB of 1.427 MB uploaded (0.000 MB deduped)wandb: | 1.426 MB of 1.427 MB uploaded (0.000 MB deduped)wandb: / 1.426 MB of 1.427 MB uploaded (0.000 MB deduped)wandb: - 1.426 MB of 1.427 MB uploaded (0.000 MB deduped)wandb: \ 1.426 MB of 1.427 MB uploaded (0.000 MB deduped)wandb: 
wandb: Run history:
wandb:                mask_ratio ‚ñÅ
wandb:            mean_std_value ‚ñÅ
wandb: mean_std_value_patch_mean ‚ñÅ
wandb:       mean_variance_value ‚ñÅ
wandb: 
wandb: Run summary:
wandb:                mask_ratio 0.25
wandb:            mean_std_value 0.1
wandb: mean_std_value_patch_mean 0.02
wandb:       mean_variance_value 0.015
wandb: 
wandb: üöÄ View run elated-waterfall-214 at: https://wandb.ai/stefania_radu/pixel-semantic-scripts_visualization/runs/3lojf41v
wandb: Ô∏è‚ö° View job at https://wandb.ai/stefania_radu/pixel-semantic-scripts_visualization/jobs/QXJ0aWZhY3RDb2xsZWN0aW9uOjExOTExMzkwMw==/version_details/v56
wandb: Synced 6 W&B file(s), 15 media file(s), 4 artifact file(s) and 0 other file(s)
wandb: Find logs at: ./wandb/run-20240304_173002-3lojf41v/logs

###############################################################################
H√°br√≥k Cluster
Job 7508748 for user s3919609
Finished at: Mon Mar  4 17:32:03 CET 2024

Job details:
============

Job ID              : 7508748
Name                : experiments_pixel_uncertainty_span_patch_4
User                : s3919609
Partition           : regularshort
Nodes               : node100
Number of Nodes     : 1
Cores               : 1
Number of Tasks     : 1
State               : COMPLETED
Submit              : 2024-03-04T17:26:29
Start               : 2024-03-04T17:29:36
End                 : 2024-03-04T17:32:00
Reserved walltime   : 01:00:00
Used walltime       : 00:02:24
Used CPU time       : 00:01:50 (efficiency: 77.06%)
% User (Computation): 94.44%
% System (I/O)      :  5.56%
Mem reserved        : 10G
Max Mem (Node/step) : 3.07G (node100, per node)
Full Max Mem usage  : 3.07G
Total Disk Read     : 583.29M
Total Disk Write    : 984.47K

Acknowledgements:
=================

Please see this page for information about acknowledging H√°br√≥k in your publications:

https://wiki.hpc.rug.nl/habrok/introduction/scientific_output

################################################################################
