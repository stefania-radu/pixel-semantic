The following modules were not unloaded:
  (Use "module --force purge" to unload all):

  1) 2023.01   2) StdEnv
wandb: Currently logged in as: stefania_radu. Use `wandb login --relogin` to force relogin
wandb: wandb version 0.16.3 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.15.12
wandb: Run data is saved locally in /home2/s3919609/pixel-semantic/wandb/run-20240304_173002-pak5rbtk
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run confused-bush-217
wandb: ‚≠êÔ∏è View project at https://wandb.ai/stefania_radu/pixel-semantic-scripts_visualization
wandb: üöÄ View run at https://wandb.ai/stefania_radu/pixel-semantic-scripts_visualization/runs/pak5rbtk
03/04/2024 17:30:07 - INFO - pixel.data.rendering.rendering_utils - loading text renderer configuration file https://huggingface.co/Team-PIXEL/pixel-base/resolve/main/text_renderer_config.json from cache at /home2/s3919609/.cache/huggingface/transformers/892d6a02d7c441000de399de59ed70d943a81f7b0f536523b4af1111677a8508.e332b34c9c05756dd4aa51d8fa33461dbd79604752296d185f03f8004db30700
03/04/2024 17:30:07 - INFO - pixel.data.rendering.rendering_utils - loading font file https://huggingface.co/Team-PIXEL/pixel-base/resolve/main/GoNotoCurrent.ttf from cache at /home2/s3919609/.cache/huggingface/transformers/49e6dc219d1a1a1c9236acaf05a48b542002016a6dc877ee72baab085a84257b.3f28e7f4b38e1efe1b6da4a3732404c19d4c6a614ff32dce90a251e293d4ce58
03/04/2024 17:30:07 - INFO - pixel.data.rendering.pygame_renderer - Loading font from /home2/s3919609/.cache/huggingface/transformers/49e6dc219d1a1a1c9236acaf05a48b542002016a6dc877ee72baab085a84257b.3f28e7f4b38e1efe1b6da4a3732404c19d4c6a614ff32dce90a251e293d4ce58
03/04/2024 17:30:07 - INFO - pixel.data.rendering.rendering_utils - Text renderer PyGameTextRenderer {
  "background_color": "white",
  "dpi": 120,
  "font_color": "black",
  "font_file": "49e6dc219d1a1a1c9236acaf05a48b542002016a6dc877ee72baab085a84257b.3f28e7f4b38e1efe1b6da4a3732404c19d4c6a614ff32dce90a251e293d4ce58",
  "font_size": 8,
  "max_seq_length": 256,
  "pad_size": 3,
  "pixels_per_patch": 16,
  "text_renderer_type": "PyGameTextRenderer"
}

03/04/2024 17:30:09 - INFO - pixel.utils.modeling - Truncating position embeddings to 256
03/04/2024 17:30:09 - INFO - pixel.utils.modeling - Truncating decoder position embeddings to 256
03/04/2024 17:30:09 - INFO - __main__ - Running PIXEL masked autoencoding with pixel reconstruction
03/04/2024 17:30:09 - INFO - __main__ - Applying span masking with "max_span_length = 1" , "cumulative_span_weights = [1.0]"  and "spacing = span"
03/04/2024 17:30:09 - INFO - __main__ - Masked count: 64, ratio = 0.2500
03/04/2024 17:30:09 - INFO - __main__ - Monte Carlo samples: 100
03/04/2024 17:30:09 - INFO - __main__ - Training mode: True
all_attention (samples, layers, batch_size, num_heads, sequence_length, sequence_length): torch.Size([100, 12, 12, 193, 193])
all_attention after mean: torch.Size([12, 12, 193, 193])
03/04/2024 17:31:39 - INFO - __main__ - std_predictions shape: torch.Size([3, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
mask.shape: torch.Size([3, 256, 256])
attentions.shape: torch.Size([12, 193, 193])
all_heads_attentions.shape: torch.Size([12, 256, 256])
all_heads_attentions_image: torch.Size([12, 256, 256])
all_layers_attentions: torch.Size([12, 12, 256, 256])
attention_grid: torch.Size([3, 3098, 3098])
attention_grid 0 : tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0220,  ..., 0.0198, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.9070,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]])
attention_grid 1 : tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0220,  ..., 0.0198, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.9070,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]])
Are the channels different? False
03/04/2024 17:31:44 - INFO - __main__ - Mean variance for whole image: 0.016
03/04/2024 17:31:44 - INFO - __main__ - Mean std for whole image: 0.1
03/04/2024 17:31:44 - INFO - __main__ - SD image: [[0.         0.         0.         ... 0.         0.         0.        ]
 [0.         0.         0.         ... 0.         0.         0.        ]
 [0.         0.         0.         ... 0.         0.         0.        ]
 ...
 [0.         0.         0.         ... 0.07751659 0.07751659 0.07751659]
 [0.         0.         0.         ... 0.07751659 0.07751659 0.07751659]
 [0.         0.         0.         ... 0.07751659 0.07751659 0.07751659]]
03/04/2024 17:31:44 - INFO - __main__ - Mean std for whole image patch mean: 0.01
03/04/2024 17:31:44 - INFO - __main__ - mean_std shape: (3, 256, 256)
03/04/2024 17:31:44 - INFO - __main__ - std_predictions shape: torch.Size([3, 256, 256])
mean_predictions: tensor([[[ 0.5466,  0.5482,  0.5500,  ...,  0.5305,  0.5318,  0.5325],
         [ 0.5624,  0.5574,  0.5991,  ...,  0.4954,  0.3699,  0.4808],
         [ 0.4333,  0.1672, -0.4901,  ...,  0.3406, -0.4140,  0.2327],
         ...,
         [ 0.7043,  0.6192,  0.6643,  ...,  0.0086,  0.0171,  0.0126],
         [ 0.7478,  0.7060,  0.6590,  ...,  0.0139,  0.0138,  0.0122],
         [ 0.6972,  0.7975,  0.7339,  ...,  0.0139,  0.0194,  0.0167]],

        [[ 0.5466,  0.5482,  0.5500,  ...,  0.5305,  0.5318,  0.5325],
         [ 0.5624,  0.5574,  0.5991,  ...,  0.4954,  0.3699,  0.4808],
         [ 0.4333,  0.1672, -0.4901,  ...,  0.3406, -0.4140,  0.2327],
         ...,
         [ 0.7044,  0.6191,  0.6643,  ...,  0.0086,  0.0171,  0.0126],
         [ 0.7477,  0.7060,  0.6590,  ...,  0.0139,  0.0138,  0.0123],
         [ 0.6972,  0.7974,  0.7339,  ...,  0.0139,  0.0194,  0.0167]],

        [[ 0.5466,  0.5482,  0.5500,  ...,  0.5305,  0.5318,  0.5325],
         [ 0.5624,  0.5574,  0.5991,  ...,  0.4954,  0.3699,  0.4808],
         [ 0.4333,  0.1672, -0.4901,  ...,  0.3406, -0.4140,  0.2327],
         ...,
         [ 0.7044,  0.6192,  0.6643,  ...,  0.0086,  0.0171,  0.0126],
         [ 0.7477,  0.7060,  0.6590,  ...,  0.0139,  0.0138,  0.0122],
         [ 0.6971,  0.7975,  0.7339,  ...,  0.0139,  0.0194,  0.0167]]])
std_predictions_per_patch: tensor([ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         3.4667,  3.4599,  3.4644,  3.4733,  3.4653,  3.4618,  3.4611,  3.4599,
         3.4677,  3.4640,  3.4666,  3.4696,  3.4659,  3.4623,  3.4629,  3.4648,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         2.3666,  2.3667,  2.3693,  2.3694,  2.3675,  2.3665,  2.3677,  2.3639,
         2.3630,  2.3635,  2.3653,  2.3626,  2.3608,  2.3629,  2.3641,  2.3681,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         4.1001,  4.0976,  4.0986,  4.0926,  4.0876,  4.0995,  4.0996,  4.0973,
         4.1023,  4.0991,  4.1016,  4.0973,  4.0988,  4.1046,  4.1072,  4.1062,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         3.7709,  3.7664,  3.7614,  3.7627,  3.7619,  3.7632,  3.7641,  3.7674,
         3.7732,  3.7590,  3.7614,  3.7630,  3.7655,  3.7650,  3.7605,  3.7688,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
        16.9280, 16.9751, 16.9690, 16.9539, 16.9598, 16.9361, 16.8595, 16.8479,
        16.8544, 16.8793, 16.9042, 16.8392, 16.8880, 16.8697, 16.8653, 16.8768,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
        10.4179, 10.4143, 10.4382, 10.4196, 10.4134, 10.4457, 10.3793, 10.3594,
        10.3727, 10.3696, 10.4197, 10.3942, 10.3799, 10.4297, 10.3845, 10.4026,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000])
std_reconstruction_per_patch: tensor([ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         3.4667,  3.4599,  3.4644,  3.4733,  3.4653,  3.4618,  3.4611,  3.4599,
         3.4677,  3.4640,  3.4666,  3.4696,  3.4659,  3.4623,  3.4629,  3.4648,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         2.3666,  2.3667,  2.3693,  2.3694,  2.3675,  2.3665,  2.3677,  2.3639,
         2.3630,  2.3635,  2.3653,  2.3626,  2.3608,  2.3629,  2.3641,  2.3681,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         4.1001,  4.0976,  4.0986,  4.0926,  4.0876,  4.0995,  4.0996,  4.0973,
         4.1023,  4.0991,  4.1016,  4.0973,  4.0988,  4.1046,  4.1072,  4.1062,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         3.7709,  3.7664,  3.7614,  3.7627,  3.7619,  3.7632,  3.7641,  3.7674,
         3.7732,  3.7590,  3.7614,  3.7630,  3.7655,  3.7650,  3.7605,  3.7688,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
        16.9280, 16.9751, 16.9690, 16.9539, 16.9598, 16.9361, 16.8595, 16.8479,
        16.8544, 16.8793, 16.9042, 16.8392, 16.8880, 16.8697, 16.8653, 16.8768,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
        10.4179, 10.4143, 10.4382, 10.4196, 10.4134, 10.4457, 10.3793, 10.3594,
        10.3727, 10.3696, 10.4197, 10.3942, 10.3799, 10.4297, 10.3845, 10.4026,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
         0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000])
03/04/2024 17:31:45 - INFO - __main__ - torch.Size([3, 256, 256])
03/04/2024 17:31:45 - INFO - __main__ - torch.Size([3, 256, 256])
wandb: Waiting for W&B process to finish... (success).
wandb: - 1.430 MB of 1.431 MB uploaded (0.000 MB deduped)wandb: \ 1.430 MB of 1.431 MB uploaded (0.000 MB deduped)wandb: | 1.430 MB of 1.431 MB uploaded (0.000 MB deduped)wandb: / 1.430 MB of 1.431 MB uploaded (0.000 MB deduped)wandb: - 1.430 MB of 1.431 MB uploaded (0.000 MB deduped)wandb: \ 1.430 MB of 1.431 MB uploaded (0.000 MB deduped)wandb: | 1.430 MB of 1.431 MB uploaded (0.000 MB deduped)wandb: 
wandb: Run history:
wandb:                mask_ratio ‚ñÅ
wandb:            mean_std_value ‚ñÅ
wandb: mean_std_value_patch_mean ‚ñÅ
wandb:       mean_variance_value ‚ñÅ
wandb: 
wandb: Run summary:
wandb:                mask_ratio 0.25
wandb:            mean_std_value 0.1
wandb: mean_std_value_patch_mean 0.01
wandb:       mean_variance_value 0.016
wandb: 
wandb: üöÄ View run confused-bush-217 at: https://wandb.ai/stefania_radu/pixel-semantic-scripts_visualization/runs/pak5rbtk
wandb: Ô∏è‚ö° View job at https://wandb.ai/stefania_radu/pixel-semantic-scripts_visualization/jobs/QXJ0aWZhY3RDb2xsZWN0aW9uOjExOTExMzkwMw==/version_details/v56
wandb: Synced 6 W&B file(s), 15 media file(s), 4 artifact file(s) and 0 other file(s)
wandb: Find logs at: ./wandb/run-20240304_173002-pak5rbtk/logs

###############################################################################
H√°br√≥k Cluster
Job 7508744 for user s3919609
Finished at: Mon Mar  4 17:32:03 CET 2024

Job details:
============

Job ID              : 7508744
Name                : experiments_pixel_uncertainty_span_patch_1
User                : s3919609
Partition           : regularshort
Nodes               : node100
Number of Nodes     : 1
Cores               : 1
Number of Tasks     : 1
State               : COMPLETED
Submit              : 2024-03-04T17:26:20
Start               : 2024-03-04T17:29:36
End                 : 2024-03-04T17:32:00
Reserved walltime   : 01:00:00
Used walltime       : 00:02:24
Used CPU time       : 00:01:51 (efficiency: 77.09%)
% User (Computation): 94.19%
% System (I/O)      :  5.81%
Mem reserved        : 10G
Max Mem (Node/step) : 3.12G (node100, per node)
Full Max Mem usage  : 3.12G
Total Disk Read     : 583.29M
Total Disk Write    : 984.28K

Acknowledgements:
=================

Please see this page for information about acknowledging H√°br√≥k in your publications:

https://wiki.hpc.rug.nl/habrok/introduction/scientific_output

################################################################################
